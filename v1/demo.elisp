(defun read-new-event ()
  (setq
   event-name (read-string "Enter Event Name: ")
   event-time (read-string (concat "When does \"" event-name "\" happen? (hh:mm) "))
   event-duration (read-string (concat "How long does \"" event-name "\" take? (minutes) "))
   )
  (list event-name event-time event-duration)
)

; (read-new-event) ;; (multiple-value-bind
;;     (second minute hour day month year day-of-week dst-p tz)
;;   (setq now_decoded (list day month year))
;;  )

(setq user-events (list (list "Start" "00:00" "0")))


(setq keep-reading t)
(read-string "Let's get started with building your day [Enter to continue]")

; get users user-event
(while keep-reading
  (if (not (equal (read-string "Add new event? [y/enter]: ") "y"))
      (setq keep-reading nil)
      (setq user-events
            (cons (read-new-event) user-events)))
  )
(setq keep-reading t)

(defun str-to-time (str)
  (setq time (split-string str ":")
        hour (cl-parse-integer (first time))
        minute (cl-parse-integer (second time)))
  (list hour minute)
  )

(defun add-minutes-to-time (time minutes)
  (setq hours-from-minutes (truncate
                            (/ minutes 60))
        remaining-minutes (% minutes 60))
  (list  (+ hours-from-minutes (first time)) (+ remaining-minutes (second time)))
  )

(setq timed-events (list)
      wild-events (list))

(defun wild-events/add (user-event)
  (setq wild-events
        (cons user-event wild-events)) ; TODO Maybe refactor this
  )
(defun timed-events/add (user-event)
  (setf (nth 1 user-event) (str-to-time (nth 1 user-event)))
  (setq timed-events
        (cons user-event timed-events))
  )

(loop for user-event in user-events do
     (if (not (equal (first user-event) ""))
         (timed-events/add user-event)
         (wild-events/add user-event)
         )
     )



